# -*- coding: utf-8 -*-
"""data_models.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1H4QNvz6xej6l-RBDIvMM-aVgGRyMabaf

Pydantic models for structured data storage.
Ensures data consistency and validation.
"""

from datetime import datetime
from typing import List, Optional
from pydantic import BaseModel, Field, validator

class FileChange(BaseModel):
    """Represents a changed file in a PR."""
    filename: str
    status: str  # 'added', 'modified', 'removed'
    additions: int
    deletions: int
    patch: Optional[str] = None

    @property
    def is_python(self) -> bool:
        """Check if file is a Python file."""
        return self.filename.endswith('.py')

class ReviewComment(BaseModel):
    """Represents an inline code review comment."""
    author: str
    body: str
    path: str  # File path
    line: Optional[int] = None
    created_at: datetime
    diff_hunk: Optional[str] = None  # Code context

    @validator('body')
    def clean_body(cls, v):
        """Clean and normalize comment body."""
        return v.strip() if v else ""

    @property
    def is_meaningful(self) -> bool:
        """Check if comment has meaningful content."""
        # Filter out simple acknowledgments
        meaningless = ['lgtm', 'looks good', '👍', 'ok', 'thanks']
        return len(self.body) > 10 and self.body.lower() not in meaningless

class GeneralComment(BaseModel):
    """Represents a general PR comment (not inline)."""
    author: str
    body: str
    created_at: datetime

    @validator('body')
    def clean_body(cls, v):
        """Clean and normalize comment body."""
        return v.strip() if v else ""

class PullRequest(BaseModel):
    """Represents a complete pull request with all review data."""
    number: int
    title: str
    description: str
    author: str
    created_at: datetime
    merged_at: Optional[datetime] = None
    url: str
    files_changed: List[FileChange] = []
    review_comments: List[ReviewComment] = []
    general_comments: List[GeneralComment] = []

    @property
    def total_comments(self) -> int:
        """Total number of comments on this PR."""
        return len(self.review_comments) + len(self.general_comments)

    @property
    def meaningful_review_comments(self) -> List[ReviewComment]:
        """Filter for meaningful review comments only."""
        return [c for c in self.review_comments if c.is_meaningful]

    @property
    def python_files(self) -> List[FileChange]:
        """Get only Python files from changes."""
        return [f for f in self.files_changed if f.is_python]

    @property
    def lines_changed(self) -> int:
        """Total lines added + deleted."""
        return sum(f.additions + f.deletions for f in self.files_changed)

    def get_comments_for_file(self, filename: str) -> List[ReviewComment]:
        """Get all review comments for a specific file."""
        return [c for c in self.review_comments if c.path == filename]

class RepositoryData(BaseModel):
    """Represents all collected data from a repository."""
    repo_name: str
    collection_date: datetime
    prs: List[PullRequest] = []

    @property
    def total_prs(self) -> int:
        """Total number of PRs collected."""
        return len(self.prs)

    @property
    def total_comments(self) -> int:
        """Total review comments across all PRs."""
        return sum(pr.total_comments for pr in self.prs)

    @property
    def prs_with_meaningful_reviews(self) -> List[PullRequest]:
        """PRs that have at least one meaningful review comment."""
        return [pr for pr in self.prs if pr.meaningful_review_comments]

    def get_top_reviewers(self, limit: int = 10) -> List[tuple]:
        """Get most active reviewers by comment count."""
        from collections import Counter
        reviewers = Counter()

        for pr in self.prs:
            for comment in pr.review_comments:
                reviewers[comment.author] += 1

        return reviewers.most_common(limit)

    def get_most_reviewed_files(self, limit: int = 10) -> List[tuple]:
        """Get files with most review comments."""
        from collections import Counter
        files = Counter()

        for pr in self.prs:
            for comment in pr.review_comments:
                files[comment.path] += 1

        return files.most_common(limit)

class CodeReviewExample(BaseModel):
    """
    Represents a single code review example for learning.
    This is what we'll store in the vector database.
    """
    id: str  # Unique identifier
    repo_name: str
    pr_number: int
    pr_title: str

    # Code context
    file_path: str
    code_snippet: str  # The actual code being reviewed
    diff_hunk: Optional[str] = None  # Git diff context

    # Review feedback
    review_comment: str
    reviewer: str

    # Metadata for filtering and retrieval
    created_at: datetime
    tags: List[str] = []  # e.g., ['security', 'performance', 'style']

    # Metrics
    lines_changed: int = 0

    @property
    def context_text(self) -> str:
        """Full context for embedding."""
        parts = [
            f"File: {self.file_path}",
            f"Code:\n{self.code_snippet}",
        ]
        if self.diff_hunk:
            parts.append(f"Diff:\n{self.diff_hunk}")
        parts.append(f"Review: {self.review_comment}")

        return "\n\n".join(parts)

    @property
    def metadata_dict(self) -> dict:
        """Metadata for vector database storage."""
        return {
            'repo_name': self.repo_name,
            'pr_number': self.pr_number,
            'file_path': self.file_path,
            'reviewer': self.reviewer,
            'tags': self.tags,
            'created_at': self.created_at.isoformat(),
        }

class ReviewPattern(BaseModel):
    """Represents a learned review pattern from the dataset."""
    pattern_id: str
    pattern_type: str  # 'security', 'performance', 'style', 'logic', etc.
    description: str

    # Example instances of this pattern
    examples: List[CodeReviewExample] = []

    # How often this pattern appears
    frequency: int = 0

    # Which repos/reviewers use this pattern most
    primary_repos: List[str] = []
    primary_reviewers: List[str] = []

    @property
    def confidence_score(self) -> float:
        """Calculate confidence based on frequency and example quality."""
        base_score = min(self.frequency / 10.0, 1.0)  # Cap at 10 occurrences
        example_quality = len(self.examples) / max(self.frequency, 1)
        return (base_score + example_quality) / 2